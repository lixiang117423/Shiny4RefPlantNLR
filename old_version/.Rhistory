getwd()
source("./main/global.R")$value
styler:::style_active_file()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
runApp()
runApp()
runApp()
runApp()
runApp()
fluidRow(
# 第一列
column(width = 2,
box(
width = NULL,
height = 870,
title = "Download Module",
status = "danger",
solidHeader = TRUE,
collapsible = TRUE,
background = NULL,
selectInput("select_downlaod_content",
label = h4("All or Part"),
choices = list("All"="all",
"Amino acid"="aa",
"CDS"="cds"),
selected = "all"),
selectInput("download_gff_or_not",
label = h4("GFF or NOT"),
choices = list("YES"="yes",
"NO"="no"),
selected = "yes"),
selectInput("redundant_or_not",
label = h4("Redundant ot NOT"),
choices = list("YES"="yes",
"NO"="no"),
selected = "yes")
)),
# 第二列
column(width = 5,
box(
width = NULL,
height = 870,
title = "Preview",
status = "warning",
solidHeader = TRUE,
collapsible = TRUE,
background = NULL,
br(),
dataTableOutput("doanload_preview")
))
)
runApp()
styler:::style_selection()
styler:::style_selection()
runApp()
runApp()
runApp()
styler:::style_selection()
styler:::style_selection()
runApp()
source("~/.active-rstudio-document", encoding = 'UTF-8')
styler:::style_selection()
runApp()
styler:::style_selection()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
styler:::style_selection()
styler:::style_selection()
df.demp = load('./DemoData/all.data.RData')
View(all.data)
df.gff = load("./DemoData/all.gff.RData")
styler:::style_selection()
runApp()
runApp()
runApp()
styler:::style_selection()
runApp()
View(all.data)
unique(all.data$group)
colnames(df.seq)
View(df.gff)
View(df.seq)
colnames(all.data)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
unique(df.gff$group)
styler:::style_selection()
colnames(all.data)
styler:::style_selection()
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
zip('./UserResults/*', files = 'Your.results.zip')
?zip
?zip
zip(zipfile = "./UserResults/", files = "Your.results.zip")
zip(zipfile = "Your.results.zip", files = "./UserResults/")
# 压缩文件
zip(zipfile = "./UserResults/Your.results.zip", files = "./UserResults/")
?file.copy
file.remove("./UserResults/")
runApp()
styler:::style_selection()
runApp()
runApp()
?fileInput
styler:::style_selection()
styler:::style_selection()
runApp()
runApp()
runApp()
?file.remove
runApp()
runApp()
runApp()
styler:::style_selection()
runApp()
runApp()
system2(command = "blastn", args = c("-h"))
styler:::style_selection()
runApp()
runApp()
system2(command = "blastn", args = c("-h"))
lx = system2(command = "blastn", args = c("-h"))
runApp()
system2(command = "sh", args = " blast.sh")
system2(command = "sh", args = " blast.sh")
getwd()
system2(command = "sh", args = " blast.sh")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
styler:::style_selection()
styler:::style_selection()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
styler:::style_selection()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
?read.tree
styler:::style_selection()
styler:::style_selection()
runApp()
library(shiny)
library(shinydashboard)
library(dplyr)
library(data.table)
library(stringr)
library(tidyverse)
library(markdown)
library(knitr)
library(reshape2)
library(shinyWidgets)
library(ggmsa)
library(ggtree)
library(treeio)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
runApp()
shiny::runApp()
